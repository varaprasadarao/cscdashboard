// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.csc.dashboard.admin.model;

import com.csc.dashboard.admin.model.MonthDef;
import java.lang.Integer;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MonthDef_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager MonthDef.entityManager;
    
    @Transactional
    public void MonthDef.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MonthDef.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MonthDef attached = MonthDef.findMonthDef(this.monthNum);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MonthDef.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MonthDef.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MonthDef MonthDef.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MonthDef merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MonthDef.entityManager() {
        EntityManager em = new MonthDef().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MonthDef.countMonthDefs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MonthDef o", Long.class).getSingleResult();
    }
    
    public static List<MonthDef> MonthDef.findAllMonthDefs() {
        return entityManager().createQuery("SELECT o FROM MonthDef o", MonthDef.class).getResultList();
    }
    
    public static MonthDef MonthDef.findMonthDef(Integer monthNum) {
        if (monthNum == null) return null;
        return entityManager().find(MonthDef.class, monthNum);
    }
    
    public static List<MonthDef> MonthDef.findMonthDefEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MonthDef o", MonthDef.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
