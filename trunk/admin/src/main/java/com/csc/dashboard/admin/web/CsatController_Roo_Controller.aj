// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.csc.dashboard.admin.web;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.csc.dashboard.admin.model.Csat;
import com.csc.dashboard.admin.model.DropDown;
import com.csc.dashboard.admin.model.Months;
import com.csc.dashboard.admin.model.Team;

privileged aspect CsatController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String CsatController.create(@Valid Csat csat, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("csat", csat);
            return "csats/create";
        }
        uiModel.asMap().clear();
        csat.persist();
        return "redirect:/csats/" + encodeUrlPathSegment(csat.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String CsatController.createForm(Model uiModel,HttpServletRequest httpServletRequest) {
    	String remoteUser = httpServletRequest.getRemoteUser();
    	long teamCount = Team.countTeams(remoteUser);
    	if(teamCount==0)
    		return "noTeam";
    	Calendar cal = Calendar.getInstance();
    	int nowMonth = cal.get(Calendar.MONTH);
    	int nowYear = cal.get(Calendar.YEAR);
        int monthId = nowYear*12+nowMonth-1;
    	uiModel.addAttribute("csat", new Csat(monthId));
        return "csats/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String CsatController.show(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("csat", Csat.findCsat(id));
        uiModel.addAttribute("itemId", id);
        return "csats/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String CsatController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel,HttpServletRequest httpServletRequest) {
    	String remoteUser = httpServletRequest.getRemoteUser();
    	if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("csats", Csat.findCsatEntries(firstResult, sizeNo,remoteUser));
            float nrOfPages = (float) Csat.countCsats(remoteUser) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("csats", Csat.findAllCsats(remoteUser));
        }
        return "csats/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String CsatController.update(@Valid Csat csat, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("csat", csat);
            return "csats/update";
        }
        uiModel.asMap().clear();
        csat.merge();
        return "redirect:/csats/" + encodeUrlPathSegment(csat.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String CsatController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("csat", Csat.findCsat(id));
        return "csats/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String CsatController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Csat csat = Csat.findCsat(id);
        csat.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/csats";
    }
    
    @ModelAttribute("csats")
    public Collection<Csat> CsatController.populateCsats(HttpServletRequest httpServletRequest) {
    	String remoteUser = httpServletRequest.getRemoteUser();
        return Csat.findAllCsats(remoteUser);
    }
    
    @ModelAttribute("monthses")
    public Collection<Months> CsatController.populateMonthses() {
        return Months.findAllMonthses();
    }
    
    @ModelAttribute("teams")
    public Collection<Team> CsatController.populateTeams(HttpServletRequest httpServletRequest) {
    	String remoteUser = httpServletRequest.getRemoteUser();
        return Team.findAllTeams(remoteUser);
    }
    
    String CsatController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    @ModelAttribute("rating")
    public Collection<DropDown> CsatController.populateDropDown() {

    	Collection<DropDown> dd = new ArrayList<DropDown>();
    	dd.add(new DropDown("Excellent","Excellent"));
    	dd.add(new DropDown("Good","Good"));
    	dd.add(new DropDown("Average","Average"));
    	dd.add(new DropDown("Bad","Bad"));
    	
    	return dd;
    	
    }
}
