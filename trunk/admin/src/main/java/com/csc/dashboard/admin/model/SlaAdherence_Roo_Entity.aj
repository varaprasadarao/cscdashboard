// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.csc.dashboard.admin.model;

import com.csc.dashboard.admin.model.SlaAdherence;
import java.lang.Integer;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SlaAdherence_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager SlaAdherence.entityManager;
    
    @Transactional
    public void SlaAdherence.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SlaAdherence.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SlaAdherence attached = SlaAdherence.findSlaAdherence(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SlaAdherence.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SlaAdherence.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SlaAdherence SlaAdherence.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SlaAdherence merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager SlaAdherence.entityManager() {
        EntityManager em = new SlaAdherence().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SlaAdherence.countSlaAdherences(String username) {
    	String query = "SELECT COUNT(o) FROM SlaAdherence o, UserTeam t where o.team = t.teamId and t.username = '"+username+"' order by id desc";	
        return entityManager().createQuery(query, Long.class).getSingleResult();
    }
    
    public static List<SlaAdherence> SlaAdherence.findAllSlaAdherences(String username) {
    	String query = "SELECT o FROM SlaAdherence o, UserTeam t where o.team = t.teamId and t.username = '"+username+"' order by id desc";	
        return entityManager().createQuery(query, SlaAdherence.class).getResultList();
    }
    
    public static SlaAdherence SlaAdherence.findSlaAdherence(Integer id) {
        if (id == null) return null;
        return entityManager().find(SlaAdherence.class, id);
    }
    
    public static List<SlaAdherence> SlaAdherence.findSlaAdherenceEntries(int firstResult, int maxResults, String username) {
    	String query = "SELECT o FROM SlaAdherence o, UserTeam t where o.team = t.teamId and t.username = '"+username+"' order by id desc";	
        return entityManager().createQuery(query, SlaAdherence.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
