// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.csc.dashboard.admin.model;

import com.csc.dashboard.admin.model.UserTeam;
import java.lang.String;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserTeam_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager UserTeam.entityManager;
    
    @Transactional
    public void UserTeam.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void UserTeam.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserTeam attached = UserTeam.findUserTeam(this.username);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void UserTeam.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void UserTeam.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public UserTeam UserTeam.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        UserTeam merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager UserTeam.entityManager() {
        EntityManager em = new UserTeam().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long UserTeam.countUserTeames() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserTeam o", Long.class).getSingleResult();
    }
    
    public static List<UserTeam> UserTeam.findAllUserTeames() {
        return entityManager().createQuery("SELECT o FROM UserTeam o", UserTeam.class).getResultList();
    }
    
    public static UserTeam UserTeam.findUserTeam(String username) {
        if (username == null || username.length() == 0) return null;
        return entityManager().find(UserTeam.class, username);
    }
    
    public static List<UserTeam> UserTeam.findUserTeamEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserTeam o", UserTeam.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
