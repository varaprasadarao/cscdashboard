// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.csc.dashboard.admin.model;

import com.csc.dashboard.admin.model.Vertical;
import java.lang.Integer;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Vertical_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Vertical.entityManager;
    
    @Transactional
    public void Vertical.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Vertical.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Vertical attached = Vertical.findVertical(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Vertical.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Vertical.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Vertical Vertical.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Vertical merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Vertical.entityManager() {
        EntityManager em = new Vertical().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Vertical.countVerticals() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Vertical o", Long.class).getSingleResult();
    }
    
    public static List<Vertical> Vertical.findAllVerticals() {
        return entityManager().createQuery("SELECT o FROM Vertical o", Vertical.class).getResultList();
    }
    
    public static Vertical Vertical.findVertical(Integer id) {
        if (id == null) return null;
        return entityManager().find(Vertical.class, id);
    }
    
    public static List<Vertical> Vertical.findVerticalEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Vertical o", Vertical.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
